static int gcd(int m, int n) {
        if (m % n == 0)  return n; 
        return gcd(n, m % n);}

 public static void reverseDisplay(int value) {
        if (value > 0) {
            System.out.print(value % 10);
            reverseDisplay(value / 10);} }

  public static void reverseDisplay(String value) {
        if (!(value.length() == 0)) {
            System.out.print(value.charAt(value.length() - 1));
            reverseDisplay(value.substring(0, value.length() - 1));}}

public static int countOccurence(String str, char a) {
        if (str.length() > 0) {
            if (str.charAt(str.length() - 1) == a) {
                return 1 + countOccurence(str.substring(0, str.length() - 1), a);
            } else {
                return countOccurence(str.substring(0, str.length() - 1), a); }} return 0; }

 static int numUpperCase(String str, int idx, int count) {
        if (idx == str.length()) return count;
        if (Character.isUpperCase(str.charAt(idx)))    count++;
        return numUpperCase(str, ++idx, count); }

public static void moveDisksTOH(int n, char fromTower,
                                 char toTower, char auxTower) {moves++;
        if (n == 1) // Stopping condition (Move the last disk 'n' to complete the tower on the toTower)
            System.out.println("Move disk " + n + " from " + fromTower + " to " + toTower);
        else {moveDisks(n - 1, fromTower, auxTower, toTower);
            System.out.println("Move disk " + n + " from " +  fromTower + " to " + toTower);
            moveDisks(n - 1, auxTower, toTower, fromTower); }}

